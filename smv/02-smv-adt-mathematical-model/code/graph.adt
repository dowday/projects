
import "boolean.adt"

Adt graph
	Sorts
		node;
		edge;
		graph;
		
	Generators
		//nodes
		A : node;
		B : node;
		C : node;
		D : node;
		
		//an edge is a pair of nodes
		edge : node, node -> edge;	
		//inductive definition of a graph: it is a set of edges
		empty : graph;
		noedge : edge;
		cons: edge, graph -> graph;

	Operations
		//source of an edge
		source : edge -> node;
		//target of an edge
		target : edge -> node;
		//remove an edge from the graph
		remove : graph, edge -> graph;
		// check if a node is terminal
		isTerminal : graph, node -> bool;
		//check if there is an edge in the graph from a given node in source
		existsEdge : graph, node -> bool;
		//get the first edge in the graph from a given node, what if there are no edge for this node ?
		getEdge : graph, node -> edge; 
		//check if there is a path from a node to another node
		canReach : node, node, graph -> bool;
		//tester si un noeud appartient ˆ un cycle
		existsCycle : node, graph -> bool;
/**/
	Axioms
		//source & target
		source(edge($x, $y)) = $x;
		target(edge($x, $y)) = $y;
		
		//remove
		remove(empty, $e) = empty; //2
		if $e = $e1 then remove(cons($e1,$g), $e) = $g; //3 
		if $e != $e1 then remove(cons($e1,$g),$e) = cons($e1,remove($g,$e));
			
		//isTerminal
		isTerminal(empty, $x) = false;
		if $g != empty & existsEdge($g,$x) = false then isTerminal($g,$x) = true;
		if $g != empty & existsEdge($g,$x) = true then isTerminal($g,$x) = false;

		
		//getEdge
		getEdge(empty, $x) = noedge;
		if source($e) = $x then getEdge(cons($e,$g),$x) = $e;
		if source($e) != $x then getEdge(cons($e,$g),$x) = getEdge($g,$x);
		
		//existsEdge
		existsEdge(empty, $x) = false;
		if $x  = source($e) then existsEdge(cons($e, $g),$x) = true;
		if $x != source($e) then existsEdge(cons($e, $g),$x)  = existsEdge($g,$x); 

		//canReach
		//A node can always be reached from itself
		if $x = $y then canReach($x, $y, $g) = true;
		if $x != $y then canReach($x, $y, empty) = false;
		if $x != $y & $g != empty & existsEdge($g, $x) = false then canReach($x, $y, $g) = false;
		if $x != $y & $g !=empty & existsEdge($g, $x) = true then canReach($x, $y, $g) = or(canReach(target(getEdge($g,$x)), $y, remove($g, getEdge($g, $x))),canReach($x,$y, remove($g, getEdge($g, $x))));

		//existsCycle

		if existsEdge($g, $x) = false  then  existsCycle($x,$g)  = false; // si dans le graphe pas d'edge qui part de $x
		if existsEdge($g, $x) = true  then existsCycle($x,$g) =  or(canReach( target(getEdge($g,$x)), $x, remove($g,getEdge($g,$x))), existsCycle($x, remove($g,getEdge($g,$x))));
		 

	Theorems
		canReach(A, D, cons(edge(A,C), cons(edge(A,B), cons(edge(B,C), cons(edge(D,C), cons(edge(C,A), empty)))))) = false;
		canReach(A, C, cons(edge(A,C), cons(edge(A,B), cons(edge(B,C), cons(edge(D,C), cons(edge(C,A), empty)))))) = true;
		//canReach(A, A, empty) = true;
		existsCycle(A, cons(edge(A,C), cons(edge(A,B), cons(edge(B,C), cons(edge(D,C), cons(edge(C,A), empty)))))) = true;
		existsCycle(C, cons(edge(A,C), cons(edge(A,B), cons(edge(B,C), cons(edge(C,D), cons(edge(C,A), empty)))))) = true;
		existsCycle(D, cons(edge(A,C), cons(edge(A,B), cons(edge(B,C), cons(edge(D,C), cons(edge(C,A), empty)))))) = false;
		existsCycle(A, empty) = false;
		existsCycle(A, cons(edge(A,A), empty)) = true;
	Variables
		x : node;
		y : node;
		e : edge;
		e1 : edge;
		g : graph;